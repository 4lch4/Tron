name: TypeScript CI

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

jobs:
  build-image:
    name: Build & Push Docker Image
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v1
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Set BUILD_TAG Variable
        id: date
        run: echo "::set-env name=BUILD_TAG::$(date +'%Y%m%d')"

      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          push: true
          tags: |
            "${{ env.IMAGE_NAME }}:${{ env.BUILD_TAG }}"
            "${{ env.IMAGE_NAME }}:latest"

      - name: Image digest
        run: echo ${{ steps.docker_build.outputs.digest }}

      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

  release-manifest:
    name: Release Kubernetes Manifest
    needs: 'build-image'
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Replace tokens
        uses: cschleiden/replace-tokens@v1.0
        with:
          files: manifest.yml

      - name: Kubernetes set context
        uses: Azure/k8s-set-context@v1.1
        with:
          method: kubeconfig
          kubeconfig: '{{ secrets.KUBE_CONFIG }}'

      - name: Deploy to Kubernetes cluster
        uses: Azure/k8s-deploy@v1.3
        with:
          manifests: manifest.yml
          action: deploy

      - uses: sarisia/actions-status-discord@v1
        if: always()
        with:
          webhook: ${{ secrets.DISCORD_WEBHOOK }}

